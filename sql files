
-- Creating REGISTRATION table for customers and admins
CREATE TABLE REGISTRATION (
    CUSTOMERID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    CUSTOMERNAME VARCHAR(50) NOT NULL,
    EMAIL VARCHAR(100) NOT NULL,
    PASSWORD VARCHAR(255) NOT NULL,
    ADDRESS VARCHAR(255) NOT NULL,
    CONTACT VARCHAR(10) NOT NULL,
    ROLE VARCHAR(20) NOT NULL,
    STATUS VARCHAR(20) NOT NULL DEFAULT 'active',
    PRIMARY KEY (CUSTOMERID),
    CONSTRAINT UC_EMAIL UNIQUE (EMAIL),
    CONSTRAINT CHK_ROLE CHECK (ROLE IN ('customer', 'admin')),
    CONSTRAINT CHK_STATUS CHECK (STATUS IN ('active', 'inactive'))
);

-- Creating PRODUCT table for product details
CREATE TABLE PRODUCT (
    PRODUCTID VARCHAR(50) NOT NULL,
    PRODUCTNAME VARCHAR(100) NOT NULL,
    PRODUCTDESC VARCHAR(255) NOT NULL,
    PRODUCTPRICE DECIMAL(10, 2) NOT NULL,
    QUANTITY INTEGER NOT NULL,
    PRODUCTURL VARCHAR(255) NOT NULL,
    CATEGORY VARCHAR(50) NOT NULL,
    PRIMARY KEY (PRODUCTID),
    CONSTRAINT CHK_PRICE CHECK (PRODUCTPRICE >= 0),
    CONSTRAINT CHK_QUANTITY CHECK (QUANTITY >= 0)
);

-- Creating CART table for customer cart items
CREATE TABLE CART (
    PRODUCTID VARCHAR(50) NOT NULL,
    CUSTOMERID INTEGER NOT NULL,
    QUANTITY INTEGER NOT NULL,
    PRIMARY KEY (PRODUCTID, CUSTOMERID),
    FOREIGN KEY (PRODUCTID) REFERENCES PRODUCT(PRODUCTID) ON DELETE CASCADE,
    FOREIGN KEY (CUSTOMERID) REFERENCES REGISTRATION(CUSTOMERID) ON DELETE CASCADE,
    CONSTRAINT CHK_CART_QUANTITY CHECK (QUANTITY > 0)
);

-- Creating WISHLIST table for customer wishlist items
CREATE TABLE WISHLIST (
    PRODUCTID VARCHAR(50) NOT NULL,
    CUSTOMERID INTEGER NOT NULL,
    PRIMARY KEY (PRODUCTID, CUSTOMERID),
    FOREIGN KEY (PRODUCTID) REFERENCES PRODUCT(PRODUCTID) ON DELETE CASCADE,
    FOREIGN KEY (CUSTOMERID) REFERENCES REGISTRATION(CUSTOMERID) ON DELETE CASCADE
);

-- Creating ORDERS table for order details
CREATE TABLE ORDERS (
    ORDERID VARCHAR(50) NOT NULL,
    ORDERDATE DATE NOT NULL,
    CUSTOMERID INTEGER NOT NULL,
    ADDRESS VARCHAR(255) NOT NULL,
    PRODUCTID VARCHAR(50) NOT NULL,
    PRODUCTPRICE DECIMAL(10, 2) NOT NULL,
    QUANTITY INTEGER NOT NULL,
    TOTALPRICE DECIMAL(10, 2) NOT NULL,
    PRIMARY KEY (ORDERID, PRODUCTID),
    FOREIGN KEY (CUSTOMERID) REFERENCES REGISTRATION(CUSTOMERID) ON DELETE CASCADE,
    FOREIGN KEY (PRODUCTID) REFERENCES PRODUCT(PRODUCTID) ON DELETE CASCADE,
    CONSTRAINT CHK_ORDER_QUANTITY CHECK (QUANTITY > 0),
    CONSTRAINT CHK_ORDER_PRICE CHECK (PRODUCTPRICE >= 0),
    CONSTRAINT CHK_TOTAL_PRICE CHECK (TOTALPRICE >= 0)
);


CREATE TABLE ORDERID (
    OID VARCHAR(50) NOT NULL,
    PRIMARY KEY (OID)
);

-- Insert initial value for ORDERID table
INSERT INTO ORDERID (OID) VALUES ('1000');